
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "uwb/uwb_har_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_uwb_uwb_har_tutorial.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_uwb_uwb_har_tutorial.py:


Tutorial for UWB Human Activity Recognition
==============================================================

.. GENERATED FROM PYTHON SOURCE LINES 5-15

.. code-block:: Python

    import torch
    import torch.nn as nn
    import os

    from pysensing.uwb.datasets.get_dataloader import *
    from pysensing.uwb.models.get_model import *
    from pysensing.uwb.training.har import *
    from pysensing.uwb.inference.predict import *
    from pysensing.uwb.inference.embedding import *








.. GENERATED FROM PYTHON SOURCE LINES 16-32

Download Data from Cloud Storage
-----------------------------------

Open the following link in your browser to download HAR datasets:

[Download Sleep_Pose_Net Dataset](https://pysensing.oss-ap-southeast-1.aliyuncs.com/data/uwb/sleep_pose_net_data.zip) \
[...]()

Unzip the downloaded file and move to your data folder. For HAR, the data folder should look like this:
```
|---data 
|------|---HAR 
|------|------|---sleep_pose_net_data 
|------|------|------|---Dataset I 
|------|------|------|---Dataset II 
```

.. GENERATED FROM PYTHON SOURCE LINES 34-64

Load the data
-----------------------------------

Human action recognition dataset: 

Sleep Pose Net Dataset
UWB size : n x 160 x 100
x_diff and x_wrtft size is depended on preprocessing parameters

Dataset 1
- number of classes : 6
- train number : 623
- test number : 307

Dataset 2
- number of classes : 7
- train number : 739
- test number : 365

Dataset name choices are: 
- 'Sleepposenet_dataset1'
- 'Sleepposenet_dataset2_session1_ceiling'
- 'Sleepposenet_dataset2_session1_wall'
- 'Sleepposenet_dataset2_session1_all'
- 'Sleepposenet_dataset2_session2_ceiling'
- 'Sleepposenet_dataset2_session2_wall'
- 'Sleepposenet_dataset2_session2_all'
- 'Sleepposenet_dataset2_sessionALL_ceiling'
- 'Sleepposenet_dataset2_sessionALL_wall'
- 'Sleepposenet_dataset2_sessionALL_all'

.. GENERATED FROM PYTHON SOURCE LINES 64-75

.. code-block:: Python


    root = './data' 
    train_loader, test_loader = load_har_dataset(root, 'Sleepposenet_dataset2_session1_all')
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    for data in train_loader:
        x_diff, x_wrtft, labels = data
        print(x_diff.size())
        print(x_wrtft.size())
        print(labels.size())
        break





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Loading Sleep Pose Net Dataset 2 session 1 all ...
      0%|          | 0/739 [00:00<?, ?it/s]      4%|▎         | 26/739 [00:00<00:02, 252.39it/s]      8%|▊         | 56/739 [00:00<00:02, 278.97it/s]     12%|█▏        | 86/739 [00:00<00:02, 286.45it/s]     16%|█▌        | 116/739 [00:00<00:02, 289.85it/s]     20%|█▉        | 146/739 [00:00<00:02, 290.85it/s]     24%|██▍       | 176/739 [00:00<00:01, 293.65it/s]     28%|██▊       | 206/739 [00:00<00:01, 292.36it/s]     32%|███▏      | 236/739 [00:00<00:01, 293.06it/s]     36%|███▌      | 266/739 [00:00<00:01, 294.51it/s]     40%|████      | 297/739 [00:01<00:01, 296.80it/s]     44%|████▍     | 327/739 [00:01<00:01, 294.12it/s]     48%|████▊     | 357/739 [00:01<00:01, 294.73it/s]     53%|█████▎    | 388/739 [00:01<00:01, 298.09it/s]     57%|█████▋    | 418/739 [00:01<00:01, 294.63it/s]     61%|██████    | 449/739 [00:01<00:00, 297.06it/s]     65%|██████▍   | 479/739 [00:01<00:00, 296.19it/s]     69%|██████▉   | 509/739 [00:01<00:00, 294.93it/s]     73%|███████▎  | 539/739 [00:01<00:00, 296.20it/s]     77%|███████▋  | 569/739 [00:01<00:00, 296.23it/s]     81%|████████  | 599/739 [00:02<00:00, 295.80it/s]     85%|████████▌ | 630/739 [00:02<00:00, 298.86it/s]     89%|████████▉ | 660/739 [00:02<00:00, 296.20it/s]     94%|█████████▎| 691/739 [00:02<00:00, 297.47it/s]     98%|█████████▊| 721/739 [00:02<00:00, 296.99it/s]    100%|██████████| 739/739 [00:02<00:00, 294.34it/s]
      0%|          | 0/365 [00:00<?, ?it/s]      8%|▊         | 30/365 [00:00<00:01, 293.68it/s]     16%|█▋        | 60/365 [00:00<00:01, 294.45it/s]     25%|██▍       | 90/365 [00:00<00:00, 296.60it/s]     33%|███▎      | 120/365 [00:00<00:00, 292.99it/s]     41%|████▏     | 151/365 [00:00<00:00, 297.44it/s]     50%|████▉     | 182/365 [00:00<00:00, 300.00it/s]     58%|█████▊    | 213/365 [00:00<00:00, 298.12it/s]     67%|██████▋   | 243/365 [00:00<00:00, 295.01it/s]     75%|███████▍  | 273/365 [00:00<00:00, 295.01it/s]     83%|████████▎ | 303/365 [00:01<00:00, 296.23it/s]     92%|█████████▏| 334/365 [00:01<00:00, 298.89it/s]    100%|██████████| 365/365 [00:01<00:00, 300.80it/s]    100%|██████████| 365/365 [00:01<00:00, 297.64it/s]
    torch.Size([32, 1, 40, 99])
    torch.Size([32, 1, 13, 38])
    torch.Size([32])




.. GENERATED FROM PYTHON SOURCE LINES 76-80

Load the model
-----------------------------------
Model zoo:
Sleep Pose Net model

.. GENERATED FROM PYTHON SOURCE LINES 80-84

.. code-block:: Python


    model = load_har_model(dataset_name = 'sleep_pose_net_dataset2', model_name = 'sleepposenet')
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    sleepposenet(
      (TD_conv): Sequential(
        (0): Conv2d(1, 16, kernel_size=(2, 3), stride=(1, 1))
        (1): ReLU()
        (2): Dropout2d(p=0.3, inplace=False)
        (3): MaxPool2d(kernel_size=(2, 3), stride=(2, 3), padding=0, dilation=1, ceil_mode=False)
        (4): Conv2d(16, 32, kernel_size=(2, 3), stride=(1, 1))
        (5): ReLU()
        (6): Dropout2d(p=0.3, inplace=False)
        (7): MaxPool2d(kernel_size=(2, 3), stride=(2, 3), padding=0, dilation=1, ceil_mode=False)
        (8): Conv2d(32, 32, kernel_size=(2, 3), stride=(1, 1))
        (9): ReLU()
        (10): Dropout2d(p=0.3, inplace=False)
        (11): MaxPool2d(kernel_size=(2, 3), stride=(2, 3), padding=0, dilation=1, ceil_mode=False)
      )
      (TD_fc): Linear(in_features=256, out_features=128, bias=True)
      (WRTFT_conv): Sequential(
        (0): Conv2d(1, 10, kernel_size=(2, 2), stride=(1, 1))
        (1): ReLU()
        (2): Dropout2d(p=0.3, inplace=False)
        (3): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
        (4): Conv2d(10, 20, kernel_size=(2, 2), stride=(1, 1))
        (5): ReLU()
        (6): Dropout2d(p=0.3, inplace=False)
        (7): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
      )
      (WRTFT_fc): Linear(in_features=320, out_features=128, bias=True)
      (fc): Sequential(
        (0): Linear(in_features=256, out_features=10, bias=True)
        (1): ReLU()
        (2): Dropout(p=0.2, inplace=False)
        (3): Linear(in_features=10, out_features=7, bias=True)
      )
    )




.. GENERATED FROM PYTHON SOURCE LINES 85-87

Model train
-----------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 87-101

.. code-block:: Python


    criterion = nn.CrossEntropyLoss()
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    sleepposenet_training(
        root= root,
        dataset_name='Sleepposenet_dataset2_session1_all',
        datasetname_model='sleep_pose_net_dataset2',
        model_name='sleepposenet',
        num_epochs=5,
        learning_rate=0.001,
        save_weights=True
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Loading Sleep Pose Net Dataset 2 session 1 all ...
      0%|          | 0/739 [00:00<?, ?it/s]      4%|▍         | 30/739 [00:00<00:02, 294.80it/s]      8%|▊         | 60/739 [00:00<00:02, 294.13it/s]     12%|█▏        | 91/739 [00:00<00:02, 296.89it/s]     17%|█▋        | 122/739 [00:00<00:02, 301.79it/s]     21%|██        | 153/739 [00:00<00:01, 301.65it/s]     25%|██▍       | 184/739 [00:00<00:01, 302.03it/s]     29%|██▉       | 215/739 [00:00<00:01, 302.10it/s]     33%|███▎      | 246/739 [00:00<00:01, 300.55it/s]     38%|███▊      | 278/739 [00:00<00:01, 304.83it/s]     42%|████▏     | 309/739 [00:01<00:01, 304.18it/s]     46%|████▌     | 340/739 [00:01<00:01, 301.42it/s]     50%|█████     | 371/739 [00:01<00:01, 301.02it/s]     54%|█████▍    | 402/739 [00:01<00:01, 299.70it/s]     58%|█████▊    | 432/739 [00:01<00:01, 299.54it/s]     63%|██████▎   | 463/739 [00:01<00:00, 299.66it/s]     67%|██████▋   | 494/739 [00:01<00:00, 301.05it/s]     71%|███████   | 525/739 [00:01<00:00, 299.79it/s]     75%|███████▌  | 556/739 [00:01<00:00, 301.48it/s]     79%|███████▉  | 587/739 [00:01<00:00, 303.23it/s]     84%|████████▎ | 618/739 [00:02<00:00, 303.32it/s]     88%|████████▊ | 649/739 [00:02<00:00, 300.59it/s]     92%|█████████▏| 680/739 [00:02<00:00, 302.59it/s]     96%|█████████▌| 711/739 [00:02<00:00, 303.75it/s]    100%|██████████| 739/739 [00:02<00:00, 301.63it/s]
      0%|          | 0/365 [00:00<?, ?it/s]      8%|▊         | 31/365 [00:00<00:01, 307.74it/s]     17%|█▋        | 62/365 [00:00<00:00, 308.96it/s]     25%|██▌       | 93/365 [00:00<00:00, 304.61it/s]     34%|███▍      | 124/365 [00:00<00:00, 304.65it/s]     43%|████▎     | 156/365 [00:00<00:00, 307.60it/s]     51%|█████     | 187/365 [00:00<00:00, 306.18it/s]     60%|█████▉    | 218/365 [00:00<00:00, 303.33it/s]     68%|██████▊   | 249/365 [00:00<00:00, 300.48it/s]     77%|███████▋  | 280/365 [00:00<00:00, 303.14it/s]     85%|████████▌ | 311/365 [00:01<00:00, 301.60it/s]     94%|█████████▎| 342/365 [00:01<00:00, 299.13it/s]    100%|██████████| 365/365 [00:01<00:00, 302.98it/s]
    Epoch:1, Accuracy:0.1276,Loss:1.938271135
    Epoch:2, Accuracy:0.1836,Loss:1.901973683
    Epoch:3, Accuracy:0.2704,Loss:1.804027031
    Epoch:4, Accuracy:0.3242,Loss:1.704321756
    Epoch:5, Accuracy:0.3824,Loss:1.611993980




.. GENERATED FROM PYTHON SOURCE LINES 102-105

Model inference
-----------------------------------
You need to define the pre-trained weight path in the `predictor` object's `pt_weight_path` variable. Otherwise, the varibale will set to None and no weight will be loaded.

.. GENERATED FROM PYTHON SOURCE LINES 105-118

.. code-block:: Python


    har_predictor = predictor(
        task='har', 
        dataset_name='sleep_pose_net_dataset2', 
        model_name='sleepposenet',
        pt_weights = './sleepposenet_weights.pth'
    )
    for data in test_loader:
        x_diff, x_wrtft, labels = data
        break
    outputs = har_predictor.predict([x_diff, x_wrtft])
    print("output:", outputs)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Pretrained weights loaded.
    output: tensor([4, 3, 3, 4, 6, 0, 3, 5, 6, 3, 6, 4, 4, 6, 4, 6, 6, 4, 6, 6, 4, 3, 6, 3,
            3, 5, 4, 6, 2, 5, 6, 6, 0, 4, 6, 1, 3, 4, 4, 3, 6, 4, 4, 6, 4, 4, 4, 5,
            4, 6, 4, 4, 4, 4, 2, 6, 4, 4, 0, 3, 6, 3, 6, 1])




.. GENERATED FROM PYTHON SOURCE LINES 119-122

Generate embedding
-----------------------------------
- noted that the `model_name` variable defined in `load_model` function represents the model structure name, and in `load_pretrain_weights` function represents the model structure and pretrain dataset name.

.. GENERATED FROM PYTHON SOURCE LINES 122-129

.. code-block:: Python


    model = load_har_model(dataset_name = 'sleep_pose_net_dataset2', model_name = 'sleepposenet')
    model = load_pretrain_weights(model, dataset_name = 'sleep_pose_net_dataset2', model_name = 'sleepposenet', device=device)
    uwb_embedding = har_uwb_embedding(x_diff, x_wrtft, model, device)
    print('uwb_embedding shape: ', uwb_embedding.shape)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    uwb_embedding shape:  torch.Size([64, 256])





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 11.708 seconds)


.. _sphx_glr_download_uwb_uwb_har_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: uwb_har_tutorial.ipynb <uwb_har_tutorial.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: uwb_har_tutorial.py <uwb_har_tutorial.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
