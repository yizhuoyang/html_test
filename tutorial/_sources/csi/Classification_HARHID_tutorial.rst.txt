
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "csi/Classification_HARHID_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_csi_Classification_HARHID_tutorial.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_csi_Classification_HARHID_tutorial.py:


CSI classification tasks Tutorial
==============================================================

.. GENERATED FROM PYTHON SOURCE LINES 7-10

.. code-block:: Python


    # !pip install pysensing








.. GENERATED FROM PYTHON SOURCE LINES 11-13

In this tutorial, we will be implementing codes for CSI classification tasks, including Human activity recognition and Human identity detection


.. GENERATED FROM PYTHON SOURCE LINES 13-22

.. code-block:: Python

    import sys
    sys.path.append('../..')
    import pysensing.csi.dataset.get_dataloader as get_dataloader
    import pysensing.csi.model.get_model as get_model
    import pysensing.csi.inference.predict as predict
    import pysensing.csi.inference.train as train
    import pysensing.csi.inference.embedding as embedding
    import torch








.. GENERATED FROM PYTHON SOURCE LINES 23-25

Load the data
-----------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 25-74

.. code-block:: Python


    # Human action recognition dataset: 

    # UT-HAR
    # CSI size : 1 x 250 x 90
    # number of classes : 7
    # classes : lie down, fall, walk, pickup, run, sit down, stand up
    # train number : 3977
    # test number : 996

    # NTU-HAR
    # CSI size : 3 x 114 x 500
    # number of classes : 6
    # classes : box, circle, clean, fall, run, walk
    # train number : 936
    # test number : 264

    # Widar
    # BVP size : 22 x 20 x 20
    # number of classes : 22
    # classes :
    # Push&Pull, Sweep, Clap, Slide, Draw-N(H), Draw-O(H),Draw-Rectangle(H),
    # Draw-Triangle(H), Draw-Zigzag(H), Draw-Zigzag(V), Draw-N(V), Draw-O(V), Draw-1,
    # Draw-2, Draw-3, Draw-4, Draw-5, Draw-6, Draw-7, Draw-8, Draw-9, Draw-10
    # train number : 34926
    # test number : 8726

    # Human identity detection dataset:

    # NTU-HumanID
    # CSI size : 3 x 114 x 500
    # number of classes : 14
    # classes : gaits of 14 subjects
    # train number : 546
    # test number : 294
    # Examples of NTU-Fi data


    train_loader, test_loader = get_dataloader.load_classification_dataset('UT_HAR', batch_size=1)
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    for data in train_loader:
   
        csi, label = data
        csi = csi.to(device)
        label = label.type(torch.LongTensor).to(device)
        print('data:', csi)
        print('label:', label)
        break





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /data1/msc/zyj/yunjiao_csi/1028/yunjiao_csi/tutorials/csi_source/data/csi
    using dataset: UT-HAR DATA
    data: tensor([[[0.5468, 0.5689, 0.5889,  ..., 0.7822, 0.7763, 0.7253],
             [0.5637, 0.5643, 0.6018,  ..., 0.7860, 0.7795, 0.7378],
             [0.5240, 0.5643, 0.5966,  ..., 0.7947, 0.7764, 0.7397],
             ...,
             [0.4804, 0.5039, 0.5125,  ..., 0.7764, 0.7505, 0.7191],
             [0.4558, 0.4916, 0.4994,  ..., 0.7675, 0.7476, 0.7178],
             [0.4508, 0.5031, 0.5368,  ..., 0.7771, 0.7546, 0.7154]]],
           device='cuda:0')
    label: tensor([3], device='cuda:0')




.. GENERATED FROM PYTHON SOURCE LINES 75-87

Load the model
-----------------------------------
Model zoo:
MLP
LeNet
ResNet
RNN
GRU
LSTM
BiLSTM
CNN+GRU
ViT

.. GENERATED FROM PYTHON SOURCE LINES 87-91

.. code-block:: Python


    model = get_model.load_har_model('UT_HAR', 'MLP')
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    har_MLP(
      (fc): Sequential(
        (0): Linear(in_features=22500, out_features=1024, bias=True)
        (1): ReLU()
        (2): Linear(in_features=1024, out_features=128, bias=True)
        (3): ReLU()
        (4): Linear(in_features=128, out_features=7, bias=True)
      )
    )




.. GENERATED FROM PYTHON SOURCE LINES 92-94

Model train
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 94-100

.. code-block:: Python

    criterion = torch.nn.CrossEntropyLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=0.001)
    epoch_num = 1

    train.har_train(train_loader, model, epoch_num, optimizer, criterion, device)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Epoch:1, Loss:1.870680501




.. GENERATED FROM PYTHON SOURCE LINES 101-103

Model inference
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 103-108

.. code-block:: Python


    model = get_model.load_pretrain(model, 'UT_HAR', 'MLP', device=device)
    output = predict.har_predict(csi, 'UT_HAR', model, device).type(torch.FloatTensor).to(device)
    print("output:", output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    output: tensor([[  6.6625, -46.0469,  -8.7211,  15.8790,  -9.4193,  -5.9890,  -0.3227]],
           device='cuda:0')




.. GENERATED FROM PYTHON SOURCE LINES 109-111

Evaluate the loss
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 111-116

.. code-block:: Python


    criterion = torch.nn.CrossEntropyLoss()
    loss = criterion(output, label)
    print(loss)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor(9.9535e-05, device='cuda:0')




.. GENERATED FROM PYTHON SOURCE LINES 117-119

Generate embedding
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 119-125

.. code-block:: Python


    csi_embedding = embedding.har_csi_embedding(csi, 'UT_HAR', model, device)
    print('csi_embedding: ', csi_embedding)







.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    csi_embedding:  tensor([[12.3174,  0.0000,  0.0000, 17.2074,  0.0000,  0.0000,  0.0000,  0.0000,
             29.9910,  0.0000, 24.0155,  0.0000,  0.0000, 20.8088,  0.0000,  0.0000,
              0.0000,  0.0000,  0.0000,  0.0000,  0.0000, 22.9627,  0.0000,  0.0000,
              0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  9.9184,
              0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
              0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
              0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
              0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  6.5926,  0.0000,  0.0000,
              0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  9.5242,
              0.0000,  0.0000,  0.0000, 28.2125,  0.0000,  0.0000,  0.0000,  0.0000,
              0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
              0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
              0.0000,  0.0000,  0.0000,  0.0000,  0.0000, 20.3657,  0.0000,  0.0000,
             22.8673,  0.0000,  0.0000, 25.0073,  0.0000,  0.0000,  0.0000,  0.0000,
              0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000, 16.9373,  0.0000,
              0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000]],
           device='cuda:0', grad_fn=<ReluBackward0>)




.. GENERATED FROM PYTHON SOURCE LINES 126-127

And that's it. We're done with our CSI humna activity recognition and human identity detection tutorials. Thanks for reading.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 12.647 seconds)


.. _sphx_glr_download_csi_Classification_HARHID_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: Classification_HARHID_tutorial.ipynb <Classification_HARHID_tutorial.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: Classification_HARHID_tutorial.py <Classification_HARHID_tutorial.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
