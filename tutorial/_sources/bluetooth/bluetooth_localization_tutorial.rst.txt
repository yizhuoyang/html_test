
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "bluetooth/bluetooth_localization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_bluetooth_bluetooth_localization_tutorial.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_bluetooth_bluetooth_localization_tutorial.py:


Bluetooth Localization Tutorial
===============================

.. GENERATED FROM PYTHON SOURCE LINES 7-10

.. code-block:: Python


    # !pip install pysensing








.. GENERATED FROM PYTHON SOURCE LINES 11-13

This is the tutoral for Bluetooth RSSI Based Localization using Fingerprinting Methods


.. GENERATED FROM PYTHON SOURCE LINES 13-22

.. code-block:: Python

    import torch
    from torch.optim import Adam, SGD
    from pysensing.bluetooth.datasets.wmu_ble_loc import get_dataloader_wmubleloc
    from pysensing.bluetooth.datasets.amazonas_indoor_env import get_dataloader_amazonasindoorenv
    from pysensing.bluetooth.models.localization.fingerprinting import MLP, CNN, WKNN, LSTM
    from pysensing.acoustic.datasets.get_dataloader import download_and_extract
    import warnings

    warnings.filterwarnings('ignore')







.. GENERATED FROM PYTHON SOURCE LINES 23-25

Data download links
-----------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 25-30

.. code-block:: Python

    dataset_url = {
    'WMUBLELoc': 'https://pysensing.oss-ap-southeast-1.aliyuncs.com/data/ble/WMUBLELoc.zip',
    'Amazonas':'https://pysensing.oss-ap-southeast-1.aliyuncs.com/data/ble/AmazonasIndoorEnv.zip'
    }








.. GENERATED FROM PYTHON SOURCE LINES 31-33

Load the WMU BLE Localization Data
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 33-43

.. code-block:: Python


    data_dir = './WMUBLELoc'
    # download the dataset if the dataset have not been download
    download_and_extract(dataset_url['WMUBLELoc'],data_dir)
    wmu_path = "./WMUBLELoc/iBeacon_RSSI_Labeled.csv"
    loader_train = get_dataloader_wmubleloc(wmu_path, batch_size=32, is_train=True, train_seed=0)
    n_samples_train = len(loader_train.dataset)
    loader_test = get_dataloader_wmubleloc(wmu_path, batch_size=32, is_train=False, train_seed=0)
    n_samples_test = len(loader_test.dataset)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading https://pysensing.oss-ap-southeast-1.aliyuncs.com/data/ble/WMUBLELoc.zip ...
    Downloading:   0%|          | 0.00/150k [00:00<?, ?iB/s]    Downloading:  55%|█████▍    | 81.9k/150k [00:00<00:00, 788kiB/s]    Downloading: 100%|██████████| 150k/150k [00:00<00:00, 399kiB/s] 
    Extracting:   0%|          | 0/3 [00:00<?, ?file/s]    Extracting: 100%|██████████| 3/3 [00:00<00:00, 328.41file/s]
    Extracted to ./WMUBLELoc




.. GENERATED FROM PYTHON SOURCE LINES 44-46

Non-Trainable Method: Weighted K-Nearest Neighbors
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: Python


    dataset_train = loader_train.dataset
    dataset_test = loader_test.dataset

    train_pos = dataset_train.ble_sets.to_numpy()[:, :2]
    train_ble = dataset_train.ble_sets.to_numpy()[:, -14:]

    sample_test_ble, sample_test_pos = dataset_test.__getitem__(0)
    sample_test_ble = sample_test_ble.detach().cpu().numpy()

    wknn_estimator = WKNN(train_pos, train_ble)
    wknn_est_pos = wknn_estimator(sample_test_ble, K=5)
    print("Ground Truth Position: {}. Estimated Position: {}".format(sample_test_pos.cpu().numpy(), wknn_est_pos))




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Ground Truth Position: [5. 3.]. Estimated Position: [770.21148984   9.18770179]




.. GENERATED FROM PYTHON SOURCE LINES 60-62

Trainable Method: MLP
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-83

.. code-block:: Python


    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    n_epochs = 10
    criterion = torch.nn.MSELoss()

    mlp_estimator = MLP(dim_in=14, dim_hidden=[64, 32, 16], dim_out=2).to(device)
    optimizer = Adam(mlp_estimator.parameters(), lr=1e-3)

    for epoch in range(n_epochs):
        for batch_id, (x, y) in enumerate(loader_train):
            x, y = x.to(device), y.to(device)
            y_pred = mlp_estimator(x)
            loss = criterion(y_pred, y)
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

    mlp_estimator.eval()
    mlp_est_pos = mlp_estimator(torch.tensor(sample_test_ble).to(device))
    print("Ground Truth Position: {}. Estimated Position: {}".format(sample_test_pos.cpu().numpy(), mlp_est_pos.cpu().detach().numpy()))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Ground Truth Position: [5. 3.]. Estimated Position: [5.8834553 2.5941563]




.. GENERATED FROM PYTHON SOURCE LINES 84-86

Trainable Method: CNN (1D)
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 86-111

.. code-block:: Python


    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    n_epochs = 10
    criterion = torch.nn.MSELoss()

    cnn_estimator = CNN(dim_in=14, dim_out=2, dim_embed=64, channels=[16, 32]).to(device)
    optimizer = Adam(cnn_estimator.parameters(), lr=1e-3)

    for epoch in range(n_epochs):
        for batch_id, (x, y) in enumerate(loader_train):
            if not torch.isfinite(x).all():
                raise ValueError("Invalid value encountered")
            x, y = x.to(device), y.to(device)
            y_pred = cnn_estimator(x)
            if not torch.isfinite(y_pred).all():
                print("Invalid value computed")
            loss = criterion(y_pred, y)
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

    cnn_estimator.eval()
    cnn_est_pos = cnn_estimator(torch.tensor(sample_test_ble).unsqueeze(0).to(device))
    print("Ground Truth Position: {}. Estimated Position: {}".format(sample_test_pos.cpu().numpy(), cnn_est_pos.cpu().detach().numpy()))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Ground Truth Position: [5. 3.]. Estimated Position: [[5.020965 2.970263]]




.. GENERATED FROM PYTHON SOURCE LINES 112-114

Trainable Method: LSTM
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 114-139

.. code-block:: Python


    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    n_epochs = 10
    criterion = torch.nn.MSELoss()

    lstm_estimator = LSTM(dim_in=14, dim_embed=64, dim_lstm=32, dim_out=2).to(device)
    optimizer = SGD(lstm_estimator.parameters(), lr=1e-3)

    for epoch in range(n_epochs):
        for batch_id, (x, y) in enumerate(loader_train):
            if not torch.isfinite(x).all():
                raise ValueError("Invalid value encountered")
            x, y = x.to(device), y.to(device)
            y_pred = lstm_estimator(x)
            if not torch.isfinite(y_pred).all():
                print("Invalid value computed")
            loss = criterion(y_pred, y)
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

    lstm_estimator.eval()
    lstm_est_pos = lstm_estimator(torch.tensor(sample_test_ble).unsqueeze(0).to(device))
    print("Ground Truth Position: {}. Estimated Position: {}".format(sample_test_pos.cpu().numpy(), lstm_est_pos.cpu().detach().numpy()))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Ground Truth Position: [5. 3.]. Estimated Position: [[4.6079016 2.1172383]]




.. GENERATED FROM PYTHON SOURCE LINES 140-142

Train CNN models for the Amazonas Indoor Environment Dataset
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 144-146

Load the Amazonas Indoor Environment Dataset
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 146-158

.. code-block:: Python

    data_dir = './Amazonas'
    # download the dataset if the dataset have not been download
    download_and_extract(dataset_url['Amazonas'],data_dir)
    amazonas_path = './Amazonas/AmazonasIndoorEnv'
    amazonas_train_loader = get_dataloader_amazonasindoorenv(amazonas_path, batch_size=32, is_train=True, receiver='ALL', train_seed=0)
    n_samples_train = len(amazonas_train_loader.dataset)

    amazonas_test_loader = get_dataloader_amazonasindoorenv(amazonas_path, batch_size=32, is_train=False, receiver='ALL', train_seed=0)
    n_samples_test = len(amazonas_test_loader.dataset)
    amazonas_dataset_test = amazonas_test_loader.dataset
    test_ble, test_pos = next(iter(amazonas_test_loader))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading https://pysensing.oss-ap-southeast-1.aliyuncs.com/data/ble/AmazonasIndoorEnv.zip ...
    Downloading:   0%|          | 0.00/151k [00:00<?, ?iB/s]    Downloading: 100%|██████████| 151k/151k [00:00<00:00, 6.43MiB/s]
    Extracting:   0%|          | 0/13 [00:00<?, ?file/s]    Extracting: 100%|██████████| 13/13 [00:00<00:00, 967.82file/s]
    Extracted to ./Amazonas




.. GENERATED FROM PYTHON SOURCE LINES 159-161

Train the Location (Coordinates) regression model
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-201

.. code-block:: Python

    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    criterion_pos = torch.nn.MSELoss().to(device)

    cnn_pos = CNN(dim_in=15, dim_out=2, dim_embed=64, channels=[16, 64]).to(device)
    optimizer_pos = Adam(cnn_pos.parameters(), lr=5e-4)

    train_epochs = 10
    for epoch in range(train_epochs):
        epoch_loss_pos = 0

        for batch_id, batch_data in enumerate(amazonas_train_loader):
            ble, pos = batch_data
            if not torch.isfinite(ble).all():
                raise ValueError("Invalid value encountered")
            ble = ble.to(device)
            pos = pos.to(device)

            pos_pred = cnn_pos(ble)
            loss_pos = criterion_pos(pos_pred, pos)

            optimizer_pos.zero_grad()
            loss_pos.backward()
            optimizer_pos.step()

            epoch_loss_pos += loss_pos.item()

        epoch_loss_pos /= (batch_id + 1)

        info = 'Epoch {}/{}: Train Loss (Localization Error) = {:.5f}'.format(epoch + 1,
                                                                              train_epochs,
                                                                              epoch_loss_pos)
        # print(info)

    cnn_pos.eval()
    test_pos_pred = cnn_pos(test_ble.to(device))
    test_accuracy = criterion_pos(test_pos_pred, test_pos.to(device))

    print("The testing accuracy of coordinate localization is: {}".format(test_accuracy))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The testing accuracy of coordinate localization is: 3.293771266937256




.. GENERATED FROM PYTHON SOURCE LINES 202-204

Extract embeddings from pre-trained localization model (Instance: CNN for UJIIndoorLoc)
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 204-220

.. code-block:: Python

    uji_test_loader = get_dataloader_amazonasindoorenv(amazonas_path, batch_size=4765, is_train=False, receiver='ALL', train_seed=0)
    n_samples_test = len(uji_test_loader.dataset)
    dataset_test = uji_test_loader.dataset
    test_ble, test_pos = next(iter(uji_test_loader))

    from pysensing.bluetooth.models.localization.load_model import load_pretrain

    device = torch.device("cpu")
    model = CNN(dim_in=15, dim_out=2, dim_embed=64, channels=[16, 64]).to(device)

    url_pretrain = "https://pysensing.oss-ap-southeast-1.aliyuncs.com/pretrain/ble/localization/amazonas_coord_cnn.pth"
    model = load_pretrain(model, url_pretrain, device)

    emb_area = model.generate_embeddings(test_ble)









.. GENERATED FROM PYTHON SOURCE LINES 221-222

And that's it. We're done with our bluetooth localization tutorial tutorials. Thanks for reading.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 20.082 seconds)


.. _sphx_glr_download_bluetooth_bluetooth_localization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: bluetooth_localization_tutorial.ipynb <bluetooth_localization_tutorial.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: bluetooth_localization_tutorial.py <bluetooth_localization_tutorial.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
