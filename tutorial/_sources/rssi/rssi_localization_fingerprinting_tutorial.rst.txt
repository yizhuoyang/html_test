
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "rssi/rssi_localization_fingerprinting_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_rssi_rssi_localization_fingerprinting_tutorial.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_rssi_rssi_localization_fingerprinting_tutorial.py:


RSSI Localization Fingerprinting Tutorial
==============================================================

.. GENERATED FROM PYTHON SOURCE LINES 7-10

.. code-block:: Python


    # !pip install pysensing








.. GENERATED FROM PYTHON SOURCE LINES 11-13

In this tutorial, we will be implementing codes for rssi localization fingerprinting


.. GENERATED FROM PYTHON SOURCE LINES 13-27

.. code-block:: Python

    import os
    import torch
    from torch.optim import Adam, SGD
    from pysensing.rssi.datasets.ntu_iot_rssi import get_dataloader_ntuiotrssi
    from pysensing.rssi.datasets.uji_indoor_loc import get_dataloader_ujiindoorloc
    from pysensing.rssi.datasets.download import download_dataset
    from pysensing.rssi.inference.embedding import rssi_embedding
    from pysensing.rssi.models.localization.load_model import create_model
    from pysensing.rssi.models.localization.fingerprinting import MLP, CNN, WKNN, LSTM
    from pysensing.rssi.inference.train import train_model
    import warnings

    warnings.filterwarnings('ignore')








.. GENERATED FROM PYTHON SOURCE LINES 28-30

Download the NTU IoT Lab RSSI Data
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 30-42

.. code-block:: Python


    root_data = "./"
    download_dataset("NTUIoTRSSI", root_data)
    dir_data = os.path.join(root_data, "NTUIoTRSSI")

    path_train = os.path.join(dir_data, "data_train.txt")
    loader_train = get_dataloader_ntuiotrssi(path_train, batch_size=32, is_train=True)
    n_samples_train = len(loader_train.dataset)
    path_test = os.path.join(dir_data, "data_test.txt")
    loader_test = get_dataloader_ntuiotrssi(path_test, batch_size=32, is_train=False)
    n_samples_test = len(loader_test.dataset)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading from https://pysensing.oss-ap-southeast-1.aliyuncs.com/data/rssi/NTUIoTRSSI.zip ...
    Downloading:   0%|          | 0.00/117k [00:00<?, ?iB/s]    Downloading:  56%|█████▌    | 65.5k/117k [00:01<00:00, 63.9kiB/s]    Downloading:  84%|████████▍ | 98.3k/117k [00:01<00:00, 85.2kiB/s]    Downloading: 100%|██████████| 117k/117k [00:01<00:00, 91.3kiB/s] 
    Extracting:   0%|          | 0/4 [00:00<?, ?file/s]    Extracting: 100%|██████████| 4/4 [00:00<00:00, 196.72file/s]
    Dataset extracted to ./




.. GENERATED FROM PYTHON SOURCE LINES 43-45

Non-Trainable Method: Weighted K-Nearest Neighbors
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 45-56

.. code-block:: Python


    dataset_train = loader_train.dataset
    dataset_train.get_compact()
    dataset_test = loader_test.dataset
    sample_test_rss, sample_test_pos = dataset_test.__getitem__(0)

    pos_train, rss_train = dataset_train.compact_set[:, :2], dataset_train.compact_set[:, 2:]
    wknn_estimator = WKNN(pos_train, rss_train)
    wknn_est_pos = wknn_estimator(sample_test_rss, K=5)
    print("Ground Truth Position: {}. Estimated Position: {}".format(sample_test_pos.cpu().numpy(), wknn_est_pos))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Ground Truth Position: [-3.6  2.4]. Estimated Position: [-3.0219234   1.74840563]




.. GENERATED FROM PYTHON SOURCE LINES 57-59

Trainable Method: MLP
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 59-67

.. code-block:: Python


    mlp_estimator = train_model(model_name="MLP", dataset_name="NTUIoTRSSI", regression=True, optimizer="SGD", epochs=50, batch_size=32, lr=1e-3, dir_save=None)

    mlp_estimator = mlp_estimator.cpu()
    mlp_estimator.eval()
    mlp_est_pos = mlp_estimator(sample_test_rss)
    print("Ground Truth Position: {}. Estimated Position: {}".format(sample_test_pos.cpu().numpy(), mlp_est_pos.cpu().detach().numpy()))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading from https://pysensing.oss-ap-southeast-1.aliyuncs.com/data/rssi/NTUIoTRSSI.zip ...
    Downloading:   0%|          | 0.00/117k [00:00<?, ?iB/s]    Downloading:  56%|█████▌    | 65.5k/117k [00:00<00:00, 257kiB/s]    Downloading: 100%|██████████| 117k/117k [00:00<00:00, 407kiB/s] 
    Extracting:   0%|          | 0/4 [00:00<?, ?file/s]    Extracting: 100%|██████████| 4/4 [00:00<00:00, 353.15file/s]
    Dataset extracted to ./
    Ground Truth Position: [-3.6  2.4]. Estimated Position: [-3.9465919  1.5647643]




.. GENERATED FROM PYTHON SOURCE LINES 68-70

Trainable Method: CNN (1D)
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 70-78

.. code-block:: Python


    cnn_estimator = train_model(model_name="CNN", dataset_name="NTUIoTRSSI", regression=True, optimizer="SGD", epochs=50, batch_size=32, lr=1e-3, dir_save=None)

    cnn_estimator = cnn_estimator.cpu()
    cnn_estimator.eval()
    cnn_est_pos = cnn_estimator(sample_test_rss.unsqueeze(0))
    print("Ground Truth Position: {}. Estimated Position: {}".format(sample_test_pos.cpu().numpy(), cnn_est_pos.cpu().detach().numpy()))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading from https://pysensing.oss-ap-southeast-1.aliyuncs.com/data/rssi/NTUIoTRSSI.zip ...
    Downloading:   0%|          | 0.00/117k [00:00<?, ?iB/s]    Downloading:  42%|████▏     | 49.2k/117k [00:00<00:00, 251kiB/s]    Downloading:  84%|████████▍ | 98.3k/117k [00:00<00:00, 216kiB/s]    Downloading: 100%|██████████| 117k/117k [00:00<00:00, 261kiB/s] 
    Extracting:   0%|          | 0/4 [00:00<?, ?file/s]    Extracting: 100%|██████████| 4/4 [00:00<00:00, 798.99file/s]
    Dataset extracted to ./
    Ground Truth Position: [-3.6  2.4]. Estimated Position: [[-4.2424746  1.5533518]]




.. GENERATED FROM PYTHON SOURCE LINES 79-81

Trainable Method: LSTM
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 81-90

.. code-block:: Python


    lstm_estimator = train_model(model_name="LSTM", dataset_name="NTUIoTRSSI", regression=True, optimizer="SGD", epochs=50, batch_size=32, lr=1e-3, dir_save=None)

    lstm_estimator = lstm_estimator.cpu()
    lstm_estimator.eval()
    lstm_est_pos = lstm_estimator(sample_test_rss.unsqueeze(0))
    print("Ground Truth Position: {}. Estimated Position: {}".format(sample_test_pos.cpu().numpy(), lstm_est_pos.cpu().detach().numpy()))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading from https://pysensing.oss-ap-southeast-1.aliyuncs.com/data/rssi/NTUIoTRSSI.zip ...
    Downloading:   0%|          | 0.00/117k [00:00<?, ?iB/s]    Downloading: 100%|██████████| 117k/117k [00:00<00:00, 1.35MiB/s]
    Extracting:   0%|          | 0/4 [00:00<?, ?file/s]    Extracting: 100%|██████████| 4/4 [00:00<00:00, 828.10file/s]
    Dataset extracted to ./
    Ground Truth Position: [-3.6  2.4]. Estimated Position: [[-3.8549135  2.3255522]]




.. GENERATED FROM PYTHON SOURCE LINES 91-93

Train CNN models for the UJI Indoor Loc Dataset
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 95-97

Load the UJI Indoor Loc Dataset
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 97-110

.. code-block:: Python


    root_data = "./"
    download_dataset("UJIIndoorLoc", root_data)
    dir_data = os.path.join(root_data, "UJIIndoorLoc")

    uji_train_loader = get_dataloader_ujiindoorloc(os.path.join(dir_data, "trainingData.csv"), ['longitude', 'latitude', 'floor', 'buildingid'], 32, True)
    n_samples_train = len(uji_train_loader.dataset)

    uji_test_loader = get_dataloader_ujiindoorloc(os.path.join(dir_data, "validationData.csv"), ['longitude', 'latitude', 'floor', 'buildingid'], 1111, False)
    n_samples_test = len(uji_test_loader.dataset)
    dataset_test = uji_test_loader.dataset
    test_rssi, test_coord, test_area = next(iter(uji_test_loader))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading from https://pysensing.oss-ap-southeast-1.aliyuncs.com/data/rssi/UJIIndoorLoc.zip ...
    Downloading:   0%|          | 0.00/1.47M [00:00<?, ?iB/s]    Downloading:  23%|██▎       | 336k/1.47M [00:00<00:00, 3.36MiB/s]    Downloading:  46%|████▌     | 672k/1.47M [00:00<00:00, 2.97MiB/s]    Downloading:  67%|██████▋   | 983k/1.47M [00:00<00:00, 3.02MiB/s]    Downloading:  99%|█████████▉| 1.46M/1.47M [00:00<00:00, 3.21MiB/s]    Downloading: 100%|██████████| 1.47M/1.47M [00:00<00:00, 3.17MiB/s]
    Extracting:   0%|          | 0/3 [00:00<?, ?file/s]    Extracting: 100%|██████████| 3/3 [00:00<00:00, 36.21file/s]
    Dataset extracted to ./




.. GENERATED FROM PYTHON SOURCE LINES 111-113

Train the Area (Building ID + Floor ID) classification model
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 113-165

.. code-block:: Python


    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    criterion_area = torch.nn.CrossEntropyLoss().to(device)

    cnn_area = CNN(dim_in=520, dim_out=15, dim_embed=64, channels=[16, 64]).to(device)
    optimizer_area = Adam(cnn_area.parameters(), lr=1e-3)

    train_epochs = 10
    for epoch in range(train_epochs):
        total = 0
        correct = 0
        epoch_loss_area = 0

        for batch_id, batch_data in enumerate(uji_train_loader):
            rssi, coord, area = batch_data
            # print(rssi)
            total += rssi.size(0)
            if not torch.isfinite(rssi).all():
                raise ValueError("Invalid value encountered")
            rssi = rssi.to(device)
            coord = coord.to(device)
            area = area.to(device)

            area_logits_pred = cnn_area(rssi)
            loss_area = criterion_area(area_logits_pred, area)

            optimizer_area.zero_grad()
            loss_area.backward()
            optimizer_area.step()

            area_label_pred = torch.argmax(area_logits_pred, dim=1)
            correct += area_label_pred.eq(area).sum().item()
            epoch_loss_area += loss_area.item()

        epoch_acc = 100. * (correct / total)
        epoch_loss_area /= (batch_id + 1)
        info = 'Epoch {}/{}: Train Accuracy = {}, Train Loss = {:.5f}'.format(epoch + 1,
                                                                              train_epochs,
                                                                              epoch_acc,
                                                                              epoch_loss_area)
        # print(info)

    cnn_area = cnn_area.cpu()
    cnn_area.eval()
    test_area_logits_pred = cnn_area(test_rssi)
    test_area_label_pred = torch.argmax(test_area_logits_pred, dim=1)
    test_correct = test_area_label_pred.eq(test_area).sum().item()
    test_total = test_rssi.size(0)
    test_accuracy = test_correct / test_total

    print("The testing accuracy of Area identification is: {}".format(test_accuracy))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The testing accuracy of Area identification is: 0.9126912691269127




.. GENERATED FROM PYTHON SOURCE LINES 166-168

Train the Location (Coordinates) regression model
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-211

.. code-block:: Python


    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    criterion_coord = torch.nn.MSELoss().to(device)

    cnn_coord = CNN(dim_in=520, dim_out=2, dim_embed=64, channels=[16, 64]).to(device)
    optimizer_coord = Adam(cnn_coord.parameters(), lr=5e-4)

    train_epochs = 10
    for epoch in range(train_epochs):
        epoch_loss_coord = 0

        for batch_id, batch_data in enumerate(uji_train_loader):
            rssi, coord, area = batch_data
            # print(rssi)
            if not torch.isfinite(rssi).all():
                raise ValueError("Invalid value encountered")
            rssi = rssi.to(device)
            coord = coord.to(device)
            area = area.to(device)

            coord_pred = cnn_coord(rssi)
            loss_coord = criterion_coord(coord_pred, coord)

            optimizer_coord.zero_grad()
            loss_coord.backward()
            optimizer_coord.step()

            epoch_loss_coord += loss_coord.item()

        epoch_loss_coord /= (batch_id + 1)

        info = 'Epoch {}/{}: Train Loss (Localization Error) = {:.5f}'.format(epoch + 1,
                                                                              train_epochs,
                                                                              epoch_loss_coord)
        # print(info)

    cnn_coord = cnn_coord.cpu()
    cnn_coord.eval()
    test_coord_pred = cnn_coord(test_rssi)
    test_accuracy = criterion_coord(test_coord_pred, test_coord)

    print("The testing accuracy of coordinate localization is: {}".format(test_accuracy))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The testing accuracy of coordinate localization is: 0.001073380233719945




.. GENERATED FROM PYTHON SOURCE LINES 212-214

Extract embeddings from pre-trained localization model (Instance: CNN for UJIIndoorLoc)
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 214-228

.. code-block:: Python


    uji_test_loader = get_dataloader_ujiindoorloc(os.path.join(dir_data, "validationData.csv"), ['longitude', 'latitude', 'floor', 'buildingid'], 1111, False)
    n_samples_test = len(uji_test_loader.dataset)
    dataset_test = uji_test_loader.dataset
    test_rssi, test_coord, test_area = next(iter(uji_test_loader))

    from pysensing.rssi.models.localization.load_model import load_pretrain

    device = torch.device("cpu")

    model = load_pretrain(model_name="CNN", dataset_name="UJIIndoorLoc", regression=False, path_model=None, device="cpu")
    emb_area = rssi_embedding(rssi=test_rssi, dataset="UJIIndoorLoc", model=model, device=device)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0.00/343k [00:00<?, ?B/s]    100%|██████████| 343k/343k [00:00<00:00, 5.88MB/s]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (2 minutes 4.909 seconds)


.. _sphx_glr_download_rssi_rssi_localization_fingerprinting_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: rssi_localization_fingerprinting_tutorial.ipynb <rssi_localization_fingerprinting_tutorial.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: rssi_localization_fingerprinting_tutorial.py <rssi_localization_fingerprinting_tutorial.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
